
求方案数,其时就是求组合数,显然用到的是背包算法.

这个题目最大的难度在于**描述不清楚**,`cnt(i,x)`表示什么啊?

花了我10分钟来理解
`cnt(i,x)`:表示如果物品i丢失,把容量为x的背包装满的方案数

显然如果不考虑丢失,那就是一个简单的背包问题.

如果暴力来做,`O(n^2m)`超时,显然不能,且可以猜出正解的时间为`n^2`

边界`f[0][0] = 1` 前0个物品装满0的背包的方案为1

状态转移方程为:

```plaintext
f[i][j]  = f[i-1][j] + f[i-1][j-w]
```

还要注意,只保留末尾数字


核心思路: 如果去除第i个物品的影响,更具体的,如何去除第i物品
对第i+1个物品的影响?

![](./1.drawio)

已知,物品的顺序不会影响的最终的答案,那么我们把要去除的那个物品放到最一个.
如上图,j行为最后一行,显然这时计算去除第j个物品后的答案就是`f[i][v]`

又知,第j行前面有颜色的部分是`v<=w[j]`的部分,这部分就是`f[i][v]`

那箭头所在点的值为:`f[j][v] = f[i][v] + f[i][v-w[j]]`,此时我们想知道`f[i][v]`
那么`f[i][v] = f[j][v] - f[i][v-w[j]]`

现在我们把思想转成一维,显然只要从左到右依次去除`f[i][v-w[j]]`即可

我们设`g[i]`表示去除最后一个物品后的值,`f[i]`是包含最一个物品的值

`g[i] = f[i] - g[i-w[i]]`,从左到右求

我称这种去除某个物品的操作为:**退背包**
